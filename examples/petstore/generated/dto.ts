/**
 * -----------------------------------
 * dto.ts
 * -----------------------------------
 * Objects generated in this file represent data transfer objects used for organizing, formatting and/or cleaning objects being sent to the application or being returned from the application.
 *
 * This is a generated file, do not directly edit. It was generated from the
 * openapi spec defined in your project.
 *
 * Generated by framer@1.0.0
 */

import * as generatedTypes from "./types";

interface Serializable {
    toJson(): object;
}

class Dto implements Serializable {
    toJson = () => ({ ...this });
}

/**
 * PetDto
 *
 * Data transfer object representing generated type Pet
 */
interface PetLike extends generatedTypes.Pet {
    [key: string]: any; // allow for other things here, hence PetLike
}

export class PetDto extends Dto {
    private _id?: number;
    private _name: string;
    private _category: generatedTypes.Category | null | undefined;
    private _photoUrls: generatedTypes.NonEmptyArray<string>;
    private _tags: generatedTypes.Tag[];
    private _status: generatedTypes.StatusEnum | null | undefined;

    constructor(obj: PetLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: PetLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof PetDto] = obj[property];
        }
    };

    set id(value: number | undefined) {
        this._id = value;
    }

    get id(): number | undefined {
        return this._id;
    }

    set name(value: string) {
        this._name = value;
    }

    get name(): string {
        return this._name;
    }

    set category(value: generatedTypes.Category | null | undefined) {
        this._category = value;
    }

    get category(): generatedTypes.Category | null | undefined {
        return this._category;
    }

    set photoUrls(value: generatedTypes.NonEmptyArray<string>) {
        this._photoUrls = value;
    }

    get photoUrls(): generatedTypes.NonEmptyArray<string> {
        return this._photoUrls;
    }

    set tags(value: generatedTypes.Tag[]) {
        this._tags = value;
    }

    get tags(): generatedTypes.Tag[] {
        return this._tags;
    }

    set status(value: generatedTypes.StatusEnum | null | undefined) {
        this._status = value;
    }

    get status(): generatedTypes.StatusEnum | null | undefined {
        return this._status;
    }
}

/**
 * CategoryDto
 *
 * Data transfer object representing generated type Category
 */
interface CategoryLike extends generatedTypes.Category {
    [key: string]: any; // allow for other things here, hence CategoryLike
}

export class CategoryDto extends Dto {
    private _id?: number;
    private _name?: string;

    constructor(obj: CategoryLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: CategoryLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof CategoryDto] = obj[property];
        }
    };

    set id(value: number | undefined) {
        this._id = value;
    }

    get id(): number | undefined {
        return this._id;
    }

    set name(value: string | undefined) {
        this._name = value;
    }

    get name(): string | undefined {
        return this._name;
    }
}

/**
 * TagDto
 *
 * Data transfer object representing generated type Tag
 */
interface TagLike extends generatedTypes.Tag {
    [key: string]: any; // allow for other things here, hence TagLike
}

export class TagDto extends Dto {
    private _id?: number;
    private _name?: string;

    constructor(obj: TagLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: TagLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof TagDto] = obj[property];
        }
    };

    set id(value: number | undefined) {
        this._id = value;
    }

    get id(): number | undefined {
        return this._id;
    }

    set name(value: string | undefined) {
        this._name = value;
    }

    get name(): string | undefined {
        return this._name;
    }
}

/**
 * ErrorDto
 *
 * Data transfer object representing generated type Error
 */
interface ErrorLike extends generatedTypes.Error {
    [key: string]: any; // allow for other things here, hence ErrorLike
}

export class ErrorDto extends Dto {
    private _code: string;
    private _message: string;

    constructor(obj: ErrorLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: ErrorLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof ErrorDto] = obj[property];
        }
    };

    set code(value: string) {
        this._code = value;
    }

    get code(): string {
        return this._code;
    }

    set message(value: string) {
        this._message = value;
    }

    get message(): string {
        return this._message;
    }
}

/**
 * ApiResponseDto
 *
 * Data transfer object representing generated type ApiResponse
 */
interface ApiResponseLike extends generatedTypes.ApiResponse {
    [key: string]: any; // allow for other things here, hence ApiResponseLike
}

export class ApiResponseDto extends Dto {
    private _code?: number;
    private _type?: string;
    private _message?: string;

    constructor(obj: ApiResponseLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: ApiResponseLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof ApiResponseDto] = obj[property];
        }
    };

    set code(value: number | undefined) {
        this._code = value;
    }

    get code(): number | undefined {
        return this._code;
    }

    set type(value: string | undefined) {
        this._type = value;
    }

    get type(): string | undefined {
        return this._type;
    }

    set message(value: string | undefined) {
        this._message = value;
    }

    get message(): string | undefined {
        return this._message;
    }
}

/**
 * OrderDto
 *
 * Data transfer object representing generated type Order
 */
interface OrderLike extends generatedTypes.Order {
    [key: string]: any; // allow for other things here, hence OrderLike
}

export class OrderDto extends Dto {
    private _id?: number;
    private _petId?: number;
    private _quantity?: number;
    private _shipDate?: string;
    private _status: generatedTypes.StatusEnum | null | undefined;
    private _complete?: boolean;

    constructor(obj: OrderLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: OrderLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof OrderDto] = obj[property];
        }
    };

    set id(value: number | undefined) {
        this._id = value;
    }

    get id(): number | undefined {
        return this._id;
    }

    set petId(value: number | undefined) {
        this._petId = value;
    }

    get petId(): number | undefined {
        return this._petId;
    }

    set quantity(value: number | undefined) {
        this._quantity = value;
    }

    get quantity(): number | undefined {
        return this._quantity;
    }

    set shipDate(value: string | undefined) {
        this._shipDate = value;
    }

    get shipDate(): string | undefined {
        return this._shipDate;
    }

    set status(value: generatedTypes.StatusEnum | null | undefined) {
        this._status = value;
    }

    get status(): generatedTypes.StatusEnum | null | undefined {
        return this._status;
    }

    set complete(value: boolean | undefined) {
        this._complete = value;
    }

    get complete(): boolean | undefined {
        return this._complete;
    }
}

/**
 * UserDto
 *
 * Data transfer object representing generated type User
 */
interface UserLike extends generatedTypes.User {
    [key: string]: any; // allow for other things here, hence UserLike
}

export class UserDto extends Dto {
    private _id?: number;
    private _username?: string;
    private _firstName?: string;
    private _lastName?: string;
    private _email?: string;
    private _password?: string;
    private _phone?: string;
    private _userStatus?: number;

    constructor(obj: UserLike | undefined) {
        super();

        if (obj === undefined) {
            return;
        }

        this.map(obj);
    }

    map = (obj: UserLike): void => {
        for (const property in Object.getOwnPropertyNames(this)) {
            if (
                typeof undefined == typeof obj[property] ||
                null === obj[property]
            ) {
                continue;
            }

            this[property as keyof UserDto] = obj[property];
        }
    };

    set id(value: number | undefined) {
        this._id = value;
    }

    get id(): number | undefined {
        return this._id;
    }

    set username(value: string | undefined) {
        this._username = value;
    }

    get username(): string | undefined {
        return this._username;
    }

    set firstName(value: string | undefined) {
        this._firstName = value;
    }

    get firstName(): string | undefined {
        return this._firstName;
    }

    set lastName(value: string | undefined) {
        this._lastName = value;
    }

    get lastName(): string | undefined {
        return this._lastName;
    }

    set email(value: string | undefined) {
        this._email = value;
    }

    get email(): string | undefined {
        return this._email;
    }

    set password(value: string | undefined) {
        this._password = value;
    }

    get password(): string | undefined {
        return this._password;
    }

    set phone(value: string | undefined) {
        this._phone = value;
    }

    get phone(): string | undefined {
        return this._phone;
    }

    set userStatus(value: number | undefined) {
        this._userStatus = value;
    }

    get userStatus(): number | undefined {
        return this._userStatus;
    }
}
