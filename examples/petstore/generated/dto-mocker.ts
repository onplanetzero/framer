/**
 * -----------------------------------
 * dto-mocker.ts
 * -----------------------------------
 * Provides mock functions for each dto created in the application
 *
 * This is a generated file, do not directly edit. It was generated from the
 * openapi spec defined in your project.
 *
 * Generated by framer@1.0.0
 */

import { faker } from "@faker-js/faker";
import {
    PetDto,
    CategoryDto,
    TagDto,
    ErrorDto,
    ApiResponseDto,
    OrderDto,
    UserDto,
} from "./dto";
import {
    NonEmptyArray,
    Pet,
    Category,
    Tag,
    StatusEnum,
    Error,
    ApiResponse,
    Order,
    User,
} from "./types";

export const createPetFactory = (overrides: Partial<Pet> = {}): PetDto =>
    new PetDto({
        id: faker.number.int({ min: 100, max: 999 }),
        name: faker.lorem.words({ min: 1, max: 3 }),
        category: createPetFactory(),
        photoUrls: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            () => faker.lorem.words({ min: 1, max: 3 }),
        ) as NonEmptyArray<string>,
        tags: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            () => createPetFactory(),
        ),
        status: faker.helpers.enumValue(StatusEnum),
        ...overrides,
    });

export const createCategoryFactory = (
    overrides: Partial<Category> = {},
): CategoryDto =>
    new CategoryDto({
        id: faker.number.int({ min: 100, max: 999 }),
        name: faker.lorem.words({ min: 1, max: 3 }),
        ...overrides,
    });

export const createTagFactory = (overrides: Partial<Tag> = {}): TagDto =>
    new TagDto({
        id: faker.number.int({ min: 100, max: 999 }),
        name: faker.lorem.words({ min: 1, max: 3 }),
        ...overrides,
    });

export const createErrorFactory = (overrides: Partial<Error> = {}): ErrorDto =>
    new ErrorDto({
        code: faker.lorem.words({ min: 1, max: 3 }),
        message: faker.lorem.words({ min: 1, max: 3 }),
        ...overrides,
    });

export const createApiResponseFactory = (
    overrides: Partial<ApiResponse> = {},
): ApiResponseDto =>
    new ApiResponseDto({
        code: faker.number.int({ min: 1 }),
        type: faker.lorem.words({ min: 1, max: 3 }),
        message: faker.lorem.words({ min: 1, max: 3 }),
        ...overrides,
    });

export const createOrderFactory = (overrides: Partial<Order> = {}): OrderDto =>
    new OrderDto({
        id: faker.number.int({ min: 100, max: 999 }),
        petId: faker.number.int({ min: 1 }),
        quantity: faker.number.int({ min: 1 }),
        shipDate: faker.date.anytime().toISOString(),
        status: faker.helpers.enumValue(StatusEnum),
        complete: faker.datatype.boolean(),
        ...overrides,
    });

export const createUserFactory = (overrides: Partial<User> = {}): UserDto =>
    new UserDto({
        id: faker.number.int({ min: 100, max: 999 }),
        username: faker.lorem.words({ min: 1, max: 3 }),
        firstName: faker.lorem.words({ min: 1, max: 3 }),
        lastName: faker.lorem.words({ min: 1, max: 3 }),
        email: faker.lorem.words({ min: 1, max: 3 }),
        password: faker.lorem.words({ min: 1, max: 3 }),
        phone: faker.lorem.words({ min: 1, max: 3 }),
        userStatus: faker.number.int({ min: 1 }),
        ...overrides,
    });
